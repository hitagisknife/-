//懒汉式单例类.在第一次调用的时候实例化自己,线程不安全
public class Singleton 
{  
  private Singleton() {}  
  private static Singleton single=null;  
  //静态工厂方法   
  public static Singleton getInstance()
  {  
    if (single == null) 
    {    
      single = new Singleton();  
    }    
    return single;  
  }  
} 

//保证线程安全的3个方法
//在getInstance方法上加同步
public static synchronized Singleton getInstance() 
{  
  if (single == null) 
    {    
      single = new Singleton();  
    }    
  return single;  
} 

//双重检查锁定
public static Singleton getInstance() 
{  
  if (singleton == null) 
  {    
    synchronized (Singleton.class) 
    {    
      if (singleton == null) 
      {    
        singleton = new Singleton();   
      }    
    }    
  }    
  return singleton;   
}  
    
    
//静态内部类
public class Singleton 
{    
  private static class LazyHolder 
  {    
    private static final Singleton INSTANCE = new Singleton();    
  }    
  private Singleton (){}    
  public static final Singleton getInstance() 
  {    
    return LazyHolder.INSTANCE;    
  }    
}  


//饿汉式单例类.在类初始化时，已经自行实例化   
public class Singleton1 
{  
  private Singleton1() {}  
  private static final Singleton1 single = new Singleton1();  
  //静态工厂方法   
  public static Singleton1 getInstance() 
  {  
    return single;  
  }  
} 


//登记式单例,类似Spring里面的方法，将类名注册，下次从里面直接获取。  
public class Singleton3 
{  
  private static Map<String,Singleton3> map = new HashMap<String,Singleton3>();  
  static
  {  
    Singleton3 single = new Singleton3();  
     map.put(single.getClass().getName(), single);  
  }  
  //保护的默认构造子  
  protected Singleton3(){}  
  //静态工厂方法,返还此类惟一的实例  
  public static Singleton3 getInstance(String name) 
  {  
    if(name == null) 
    {  
      name = Singleton3.class.getName();  
      System.out.println("name == null"+"--->name="+name);  
    }  
    if(map.get(name) == null) 
    {  
      try 
      {  
        map.put(name, (Singleton3) Class.forName(name).newInstance());  
      } catch (InstantiationException e) {  
        e.printStackTrace();  
      } catch (IllegalAccessException e) {  
        e.printStackTrace();  
      } catch (ClassNotFoundException e) {  
        e.printStackTrace();  
      }  
    }  
    return map.get(name);  
  }  
  
  //一个示意性的商业方法  
  public String about() 
  {      
    return "Hello, I am RegSingleton.";      
  }      
  public static void main(String[] args) 
  {  
    Singleton3 single3 = Singleton3.getInstance(null);  
    System.out.println(single3.about());  
  }  
} 
